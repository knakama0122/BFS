import random
X = [0,1,2,3,4] #Verticies
E = [(0,1),(0,2),(2,3),(2,4)]

Matrix = [[0 for x in range(len(V))] for y in range(len(V))] #initialize matrix
V = X.copy()

def modify(Matrix): #Use to implement fake nodes
    modified = Matrix.copy()
    fake = len(modified) - 1
    for x in range(fake + 1):
        for y in range(fake):
            modified[x].append(0)
    for x in range(1, fake + 1):
        modified.append([])
    for x in range(len(Matrix),len(modified)):    
        for y in range(len(modified)):
            if(y <= fake):
                modified[x].append(0)
            else:
                modified[x].append(1)
    return modified
        
def permute(Matrix): #permutes Matrix
    x = list(range(len(Matrix)))
    p = random.random()
    random.seed(p)
    random.shuffle(x)
    random.seed(p)
    random.shuffle(Matrix)
    for i in Matrix:
        random.seed(p)
        random.shuffle(i)
    source = x.index(0)    
    return source, x, Matrix
            
class vector:
    def __init__(self, num):
        self.C = [[] for x in range(num)]
        # For vector C:
            # 0 is for white, 1 is for gray, and black is represented by -1
            # distance means the distance from point to the source
            # parent refers to the node it's parent is
        # For vector C2':
            # value stores the indicies of the next possible nodes
            # key is used to determine the next node to select
        # For vector C3:
            # C[0] holds cond1
            # C[1] holds cond2
            # C[2] holds cond3
        # For vector F:
            # F is used to determine if a node is fake or not

    def initialize(self, permutation, source):#uses C[0] as colors, C[1] as distance, and C[2] as parent
        for x in permutation: #Initalizes all values 
            self.C[0].append(0)    
            self.C[1].append(len(permutation)) 
            self.C[2].append(-1)
        for x in permutation: #Changes values at source index to initial state
             if(x == source):
                 self.C[0][x] = 1
                 self.C[1][x] = 0

    def initialize2(self, vector):
        for x in vector.C[0]:
            self.C[0].append(0) #value
            self.C[1].append(0) #key

    def initialize3(self, vector):
        for x in vector.C[0]:           
            self.C[0].append(0) #cond1
            self.C[1].append(0) #cond2
            self.C[2].append(0) #cond3

    def initialize4(self, permutation, X): # C[x] is 0 if real node and 1 if fake
        for x in range(len(permutation)):
            if(permutation[x] < len(X)):         
                self.C[0].append(0) 
            else:
                self.C[0].append(1)

    def print(self): #prints vector
    	for x in self.C:
	       print(x)

# Matrix = modify(Matrix)       
print("X", V)
for x in range(len(Matrix)): #prints graph input
    print(x, Matrix[x])
print()
source, permutation, Matrix = permute(Matrix)
print("X", permutation) #prints permutation of input
for x in range(len(Matrix)):
    print(permutation[x], Matrix[x])
    
C = vector(3) #Step 1
C.initialize(Matrix, source) # Step 2

C2 = vector(2) #Used in step 5
C2.initialize2(C)
C3 = vector(3) #C3 contains the condition values
C3.initialize3(C)
F = vector(1) #Used in step 5(for fake nodes)
F.initialize4(permutation, X)
# print(permutation)
# F.print()

print("C:")
C.print()
v = source # Step 3
print("Next Node: ", source)

x = [] #used in step 5 to generate key value
for i in range(len(V)): #initialize to list of node indicies + 1
    x.append(i + 1)

for q in range(len(V)): #repeated |V| times
    for i in range(len(C.C[0])):  #Step 4.1
        cond = (int)(Matrix[v][i] == 1) * (int)(C.C[0][i] == 0) #4.2
        C.C[0][i] = cond * 1 + (1 - cond) * C.C[0][i] #4.3
        C.C[2][i] = cond * v + (1 - cond) * C.C[2][i] #4.4
        C.C[1][i] = cond * (C.C[1][v] + 1) + (1 - cond) * (C.C[1][i]) #4.5
    C.C[0][v] = -1 #Step 4b

    print("C:")
    C.print()

    min = len(V) #Step 5
    for i in range(len(V)): #5.2
        C3.C[0][i] = (int)(C.C[0][i] == 1) #5.3 checks if node is gray
        C3.C[1][i] = (int)(C.C[1][i] < min) #5.4 checks if node is less than current minimum distance
        min = (C3.C[0][i] * C3.C[1][i] * C.C[1][i]) + ((1 - C3.C[0][i] * C3.C[1][i]) * min)#5.5 sets minimum to Min(min, C[i] distance)
 
    random.shuffle(x)#in place of function pi(i)
    for i in range(len(V)):#5.6
        C3.C[2][i] = (int)(C.C[1][i] == min) #5.7 checks if node is equal to the minimum distance
        C2.C[0][i] = C3.C[0][i] * C3.C[2][i] * i #5.8
        C2.C[1][i] = C3.C[0][i] * C3.C[2][i] * (x[i]) #5.9x[i] is used as random permutation

    # cond = (int)(min == len(X)) #implement if using fake nodes
    # for i in range(len(V)):
    #     C2.C[0][i] = C2.C[][i] + cond * F.C[0][i] * i
    #     print("C2:")
    # C2.print()

    max = 0 #5.10
    imax = 0 #5.11 
    for i in range(len(V)): #5.12
        cond = (int)(C2.C[1][i] > max) #5.13
        max = cond * C2.C[1][i] + (1 - cond) * max #5.14
        imax = cond * C2.C[0][i] + (1 - cond) * imax #5.15
    #5.16 would decrpyt the value of imax
    v = C2.C[0][imax] #5.17
    print("Next node: " + str(v))
